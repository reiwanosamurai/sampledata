### 　Pythonによる記述統計

# atown.csvを読み込む
import pandas as pd
df = pd.read_csv("./atown.csv")
df

#平均値の計算
mean_blood_pressure = df['血圧'].mean()

#不偏標準偏差の計算（ddof=1を指定して不偏推定量を求める）
unbiased_std_dev = df['血圧'].std(ddof=1)

print(f"平均値：{mean_blood_pressure}")
print(f"不偏標準偏差：{unbiased_std_dev}")


# percent.csvを読み込む
import pandas as pd
df = pd.read_csv("./percent.csv")
df

#数列のパーセント点と四分位数を求める
import numpy as np
x25 = np.percentile(df,25)
x50 = np.percentile(df,50)
x75 = np.percentile(df,75)
x50b = np.median(df)

print ("第1四分位数:", x25)
print ("第2四分位数:", x50)
print ("第3四分位数:", x75)
print ("中央値:", x50b)

#箱ヒゲ図を作成する
import matplotlib.pyplot as plt

fig, ax = plt.subplots()
bp = ax.boxplot(df)
plt.grid() #横線ラインを入れることができる

#描画
plt.show()


# scatter.csvを読み込む
import pandas as pd
df = pd.read_csv("./scatter.csv")
df

# 散布図を作成する
import matplotlib.pyplot as plt

plt.xlim(115, 150) # x軸の表示範囲
plt.ylim(6.0, 9.0) # y軸の表示範囲
plt.title("Blood Sugar vs HbA1c", fontsize=20) # タイトル
plt.xlabel("Blood Sugar (mg/dL)", fontsize=20) # x軸ラベル
plt.ylabel("HbA1c (%)", fontsize=20) # y軸ラベル
plt.grid(True) # 目盛線の表示
plt.tick_params(labelsize = 12) # 目盛線のラベルサイズ
 
# グラフの描画
plt.scatter(df["Blood Sugar"], df["HbA1c"], s=100, c="k", marker="o", alpha=1) 
#(3)散布図の描画
plt.show()


# age.csvを読み込む
import pandas as pd
df = pd.read_csv("./age.csv")
df

# ヒストグラムを作成する
import matplotlib.pyplot as plt

plt.xlim(0, 100)                # x軸の表示範囲
plt.ylim(0, 10)                     # y軸の表示範囲
plt.xlabel("Age", fontsize=20)     # x軸ラベル
plt.ylabel("Frequency", fontsize=20) # y軸ラベル
plt.grid(True)                       # 目盛線の表示
plt.tick_params(labelsize = 12)      # 目盛線のラベルサイズ 
 
# グラフの描画
plt.hist(df, bins=15,rwidth = 0.8, color= 'k') # ヒストグラムの描画
plt.show()



### 　Pythonによる推測統計

# 95%信頼区間の計算
# fish.csvを読み込む
import pandas as pd
dat = pd.read_csv("./fish.csv")
dat
import math
import pandas as pd
from scipy.stats import t
# 母分散の推定値として標本の不偏分散を求める
p_var = dat.var()
# 標本の平均を求める
s_mean = dat.mean()
# 標本の数(サンプルサイズ)を求める
n = len(dat)
# 95%信頼区間の下限値と上限値を求める
bottom, up = t.interval(0.95, df=n-1, loc=s_mean, scale=math.sqrt(p_var/(n)))
# 信頼区間の下限値と上限値を出力
print ("点推定値:",s_mean) 
print ("下側95%信頼区間:",bottom) 
print ("上側95%信頼区間:",up) 


# 仮説検定：対応のあるt検定

# bodytemp.csvを読み込む
import pandas as pd
df = pd.read_csv("./bodytemp.csv")
df

## 対応のあるt検定
import numpy as np
import scipy as sp
from scipy import stats

before = df.query('Drug == "before"')["BT"]
after = df.query('Drug == "after"')["BT"]
before = np.array(before)
after = np.array(after)
diff = after - before
diff

stats.ttest_rel(after, before)


## 対応のないt検定

# bodytemp2.csvを読み込む
import pandas as pd
df = pd.read_csv("./bodytemp2.csv")
df

import numpy as np
import scipy as sp
from scipy import stats

# 平均値
before = df.query('Drug == "before"')["BT"]
after = df.query('Drug == "after"')["BT"]
before = np.array(before)
after = np.array(after)
mean_bef = np.mean(before)
mean_aft = np.mean(after)

# 分散
sigma_bef = np.var(before, ddof = 1)
sigma_aft = np.var(after, ddof = 1)

# サンプルサイズ
m = len(before)
n = len(after)

# t値
import scipy as sp
from scipy import stats
t_value = (mean_aft - mean_bef) / np.lib.scimath.sqrt((sigma_bef/m + sigma_aft/n))
t_value
stats.ttest_ind(after, before, equal_var = False)



## クロス表のカイ2乗検定

# cross.csvを読み込む
import pandas as pd
df = pd.read_csv("./cross.csv")
df

# 分割表に変換
crs = pd.pivot_table(
	data = df,
	values = "freq",
	aggfunc = "sum",
	index = "color",
	columns = "click"
)
print(crs)

# カイ2乗検定
import scipy as sp
from scipy import stats
sp.stats.chi2_contingency(crs, correction = False)


## 一元配置分散分析

# anova.csvを読み込む
import pandas as pd
dat = pd.read_csv("./anova.csv")
dat

# 分散分析表の作成
import statsmodels.formula.api as smf
import statsmodels.api as sm
mod = smf.ols("Temp ~ Exp", data = dat).fit()
aov_table = sm.stats.anova_lm(mod, typ=2)
print(aov_table)



### 　Pythonによる線形モデルの予測


##Pythonによる回帰分析

# children.csvを読み込む
import pandas as pd
children = pd.read_csv("./children.csv")
children


import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import linregress

# 散布図の作成
plt.figure(figsize=(10, 6))
sns.scatterplot(data=children, x='Age', y='Height')
plt.title('Age vs. Height')
plt.xlabel('Age (Years)')
plt.ylabel('Height (cm)')

# 回帰分析の実行
regression_result = linregress(children['Age'], children['Height'])

# 回帰直線の追加
x = children['Age']
plt.plot(x, regression_result.intercept + regression_result.slope*x, color='red')
plt.show()

# 回帰分析の結果を表示
print(regression_result)


##Pythonによる重回帰分析

# shikisa.csvを読み込む
import pandas as pd
shikisa = pd.read_csv("./shikisa.csv")
shikisa

#説明変数と目的変数の抽出
import numpy as np
X = np.array(shikisa[['ColorA','ColorB','ColorC','ColorD','ColorE']])
Y = np.array(shikisa['Preference'])

#ライブラリの導入
#エラーになる場合、anaconda promptからpip install statsmodels
import statsmodels.api as smf
#定数表示
X1=smf.add_constant(X) 
#OLS(最小二乗法)でモデル作成
model1 = smf.OLS(Y,X1)
#model.fitで実際の計算
result = model1.fit()
#結果表示
result.summary()


##Pythonによるロジスティック回帰分析

# cardio.csvを読み込む
import pandas as pd
cardio = pd.read_csv("./cardio.csv")
cardio

#説明変数と目的変数の抽出
import numpy as np
X = np.array(cardio[['A','B']])
Y = np.array(cardio['Category']) 

#ロジスティック回帰分析
from sklearn.linear_model import LogisticRegression
import statsmodels.api as sm
model = sm.Logit(Y, sm.add_constant(X))
result = model.fit(disp=0)
print(result.summary())

